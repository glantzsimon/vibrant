using Antlr.Runtime.Misc;
using K9.Base.DataAccessLayer.Models;
using K9.Base.WebApplication.Filters;
using K9.Base.WebApplication.UnitsOfWork;
using K9.DataAccessLayer.Attributes;
using K9.DataAccessLayer.Enums;
using K9.DataAccessLayer.Models;
using K9.SharedLibrary.Authentication;
using K9.SharedLibrary.Extensions;
using K9.SharedLibrary.Models;
using K9.WebApplication.Config;
using K9.WebApplication.Packages;
using K9.WebApplication.Services;
using K9.WebApplication.ViewModels;
using System.Linq;
using System.Web.Hosting;
using System.Web.Mvc;
using WebMatrix.WebData;

namespace K9.WebApplication.Controllers
{
    [Authorize]
    [RequirePermissions(Role = Constants.Constants.ClientUser)]
    [Route("genetic-profile")]
    public class HealthQuestionnaireController : BasePureController
    {
        private readonly IHealthQuestionnaireService _healthQuestionnaireService;
        private readonly IHealthQuestionnaireServiceAsync _healthQuestionnaireServiceAsync;
        private readonly IRepository<User> _usersRepository;
        private readonly IClientService _clientService;
        private readonly IRepository<Protocol> _protocolsRepository;
        private readonly IProtocolService _protocolService;

        public HealthQuestionnaireController(IControllerPackage<Order> controllerPackage, IOptions<DefaultValuesConfiguration> defaultValues, IMembershipService membershipService, IHealthQuestionnaireService healthQuestionnaireService, IHealthQuestionnaireServiceAsync healthQuestionnaireServiceAsync, IRepository<User> usersRepository, IClientService clientService, IRepository<Protocol> protocolsRepository, IPureControllerPackage pureControllerPackage, IProtocolService protocolService) : 

            base(controllerPackage.Logger, controllerPackage.DataSetsHelper, controllerPackage.Roles, controllerPackage.Authentication, controllerPackage.FileSourceHelper, pureControllerPackage)
        {
            _healthQuestionnaireService = healthQuestionnaireService;
            _healthQuestionnaireServiceAsync = healthQuestionnaireServiceAsync;
            _usersRepository = usersRepository;
            _clientService = clientService;
            _protocolsRepository = protocolsRepository;
            _protocolService = protocolService;
        }

        [Route("genetic-profile/questionnaire/overview")]
        public ActionResult GeneticProfileTestOverview(int? clientId = null)
        {
            HealthQuestionnaire hq;
            var userIsAdmin = Roles.CurrentUserIsInRoles(RoleNames.Administrators); 

            if (clientId.HasValue)
            {
                if (!userIsAdmin)
                {
                    var client = _clientService.Find(clientId.Value);
                    if (client.UserId != WebSecurity.CurrentUserId)
                    {
                        return HttpForbidden();
                    }
                }

                hq = _healthQuestionnaireService.GetHealthQuestionnaireForClient(clientId.Value);
            }
            else
            {
                hq = _healthQuestionnaireService.GetHealthQuestionnaireForUser(WebSecurity.CurrentUserId);
            }

            if (hq == null)
            {
                return HttpNotFound();
            }

            if (!hq.IsComplete() && !userIsAdmin)
            {
                return RedirectToAction("GeneticProfileTest");
            }

            var protocol = _protocolService.FindAutoGenerated(hq.ClientId);
            
            return View(new HealthQuestionnaireViewModel
            {
                HealthQuestionnaire = hq,
                AutoGeneratedProtocol = protocol
            });
        }

        [Route("genetic-profile/questionnaire")]
        public ActionResult GeneticProfileTest(int? clientId = null)
        {
            HealthQuestionnaire hq;

            if (clientId.HasValue)
            {
                if (!Roles.CurrentUserIsInRoles(RoleNames.Administrators))
                {
                    var client = _clientService.Find(clientId.Value);
                    if (client.UserId != WebSecurity.CurrentUserId)
                    {
                        return HttpForbidden();
                    }
                }

                hq = _healthQuestionnaireService.GetHealthQuestionnaireForClient(clientId.Value);
            }
            else
            {
                hq = _healthQuestionnaireService.GetHealthQuestionnaireForUser(WebSecurity.CurrentUserId);
            }

            if (hq == null)
            {
                return HttpNotFound();
            }

            return View(hq);
        }

        [Route("genetic-profile/questionnaire")]
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult GeneticProfileTest(HealthQuestionnaire model)
        {
            _healthQuestionnaireService.Save(model);
            
            AddModelErrors(model, e => e.Category == EQuestionCategory.PersonalDetails, model.IsPersonalDetailsActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.BloodAnalysis, model.IsBloodAnalysisActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Biometrics, model.IsBiometricsActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Acetylation, model.IsAcetylationActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Dermatoglyphics, model.IsDermatoglyphicsActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Dentition, model.IsDentitionActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.TasterStatus, model.IsTasterStatusActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.FamilyHistory, model.IsFamilyHistoryActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Cbs, model.IsCbsAndMethylationActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.Doshas, model.IsDoshasActive());
            AddModelErrors(model, e => e.Category == EQuestionCategory.GeneralHealth, model.IsGeneralHealthActive());
            
            if (model.IsComplete() && ModelState.IsValid)
            {
                //HostingEnvironment.QueueBackgroundWorkItem(e =>
                //    _healthQuestionnaireServiceAsync.AutoGenerateProtocolFromGeneticProfileAsync(model));

                _healthQuestionnaireServiceAsync.AutoGenerateProtocolFromGeneticProfile(model);
                
                return RedirectToAction("QuestionnaireCompletedSuccess");
            }

            return View(model);
        }

        [Route("genetic-profile/questionnaire/success")]
        public ActionResult QuestionnaireCompletedSuccess()
        {
            return View();
        }
        
        private void AddModelErrors(HealthQuestionnaire model, Func<QuestionCategoryAttribute, bool> condition, bool isActive = true)
        {
            var categoryQuestions = HealthQuestionnaire.GetPropertiesWithQuestionCategoryAttribute()
                .Select(e => new
                {
                    PropertyInfo = e,
                    QuestionCategoryAttribute = e.GetAttribute<QuestionCategoryAttribute>()
                })
                .Where(e => condition(e.QuestionCategoryAttribute)).ToList();

            if (isActive)
            {
                categoryQuestions
                    .ForEach(e =>
                    {
                        var value = model.GetProperty(e.PropertyInfo);
                        var valueIsNull = value == null;
                        var isComplete = !valueIsNull 
                                         && (e.QuestionCategoryAttribute.MustBeGreaterThanZero 
                                             ? double.Parse(value.ToString()) > 0 
                                             : true )
                                         || e.QuestionCategoryAttribute.AllowNull;

                        if (!isComplete)
                        {
                            ModelState.AddModelError(e.PropertyInfo.Name, Base.Globalisation.Dictionary.FieldIsRequired);
                        }
                    });
            }
        }
    }
}

