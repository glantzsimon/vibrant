@using System.Globalization
@using K9.SharedLibrary.Extensions
@model IDataTableOptions

<script type="text/javascript">

    function @Model.GetButtonRenderFunction() (data) {
        var buttons = "";
        var join = '@Model.GetQueryStringJoiner()';
        if (@Model.AllowView.ToString().ToLower()) {
            buttons += '<a href="@Url.Action("Details", Model.GetFilterRouteValues())' + join + 'id=' + data.Id + '" class="btn btn-info">@K9.Base.Globalisation.Dictionary.Details</a>';
        }
        if (@Model.AllowEdit.ToString().ToLower() && !data.IsSystemStandard) {
            buttons += '<a href="@Url.Action("Edit", Model.GetFilterRouteValues())' + join + 'id=' +data.Id + '" class="btn btn-primary"><i class="fa fa-pencil"></i> @K9.Base.Globalisation.Dictionary.Edit</a>';
        }
        if (@Model.AllowDelete.ToString().ToLower() && !data.IsSystemStandard) {
            buttons += '<a href="@Url.Action("Delete", Model.GetFilterRouteValues())' + join + 'id=' + data.Id + '" class="btn btn-danger"><i class="fa fa-trash"></i> @K9.Base.Globalisation.Dictionary.Delete</a>';
        }
        @foreach (var button in Model.CustomButtons)
		{
			@:buttons += '<a href="@Url.Action(button.Action, Model.GetFilterRouteValues())' + join + 'id=' + data.Id + '" class="btn @button.ButtonCssClass"><i class="@button.IconCssClass"></i> @button.Text</a>';
		}
        return buttons === "" ? null : buttons;
    };

    function renderYesNo(value, type, row) {
        return value ? "@K9.Base.Globalisation.Dictionary.Yes" : "@K9.Base.Globalisation.Dictionary.No";
    }

    function renderEmail(value, type, row) {
        return value !== undefined && value !== null && value.indexOf("@@") >= 0 ? '<a target="_blank" href="mailto:' + value + '">' + value + '</a>' : value;
    }

    function getColumnDefs() {
        var columnDefs = @Model.GetColumnDefsJson();

        var $columnDefs = $(columnDefs);
        if ($columnDefs.length) {
            for (var i = 0; i < $columnDefs.length; i++) {
                var $columnDef = this;
                if ($columnDef.dataType === "system.boolean") {
                    $columnDef.render = renderYesNo;
                }

                if ($columnDef.dataType === "system.string") {
                    $columnDef.render = renderEmail;
                }

                if (customColumnDefs !== null) {
                    var customColumnDef = customColumnDefs.find(cdef => cdef.dataType === $columnDef.dataType);
                    if (customColumnDef && customColumnDef.render) {
                        $columnDef.render = customColumnDef.render;
                    }
                }
            }
        }

        if (@Model.AllowCrud().ToString().ToLower()) {
            columnDefs.push({
                data: null,
                targets: [@Model.GetColumnInfos().Count],
                render: @Model.GetButtonRenderFunction()
            });
        }
        return columnDefs;
    }

    $(window).on("load", function() {
        var table = $("table#@Model.TableId");
        table.on("xhr.dt", function(e, settings, json, xhr) {
            var initTableButtons = function() {
                buttonBehaviours().displayPageSpinnerOnLinkClick();
            }
            window.setTimeout(initTableButtons, 200);
        });
        dataTable = table.DataTable({
            "ajax": table.attr("data-url"),
            "columns": @Model.GetColumnsJson(),
            "pageLength": 100,
            "columnDefs": getColumnDefs(),
            "processing": true,
            "serverSide": true,
            "stateSave": true,
            "responsive": true,
            "colReorder": true,
            "autoWidth": false,
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.10.15/i18n/@($"{CultureInfo.CurrentUICulture.GetLocaleLanguage()}.json")"
            },
            "order": customOrder || []
        });
    });

</script>
